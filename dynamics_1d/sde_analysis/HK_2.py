"""
Analysis of the order parameter for varying parameters R and sigma.
This script simulates the opinion dynamics generated by using a stochastic HK model.
The opinions are simulated only once for each parameter combination using
an equispaced start profile. The order parameter for each pair of parameters
is given on a 2D raster. The results are saved in a csv file.
"""

import numpy as np
import matplotlib.pyplot as plt
from matplotlib.pyplot import figure
from matplotlib import colors
from functions.HK_sde import HK_sde
from functions.calc_order_par import calc_order_par
import warnings
from matplotlib.ticker import (MultipleLocator, AutoMinorLocator)
from mpl_toolkits.axes_grid1 import make_axes_locatable
import csv
import ast

#----------------------------------------------
# PARAMETERS

# the level of noise
sigma = np.linspace(0, 0.16, 21)

# the bound
R = np.linspace(0, 0.35, 21)

# the number of agents
n = 100

# the step limit allowing to reach a stable position
max_steps = 10

# the array of order parameters
order_p = []

# the stopping criterion
stop = 10**(-5)

# the step size
h = 0.05

# the boundary condition
bound_cond = 'period'

#----------------------------------------------
# INITIAL CONDITIONS: use expected value distribution
x0 = [i/(n+1) for i in range(1, n+1)]

#----------------------------------------------
# SIMULATION

for s in sigma:

    # array of order parameters for one sigma
    o_p = []

    for r in R:

        # SIMULATION
        x = HK_sde(r, n, x0, h = h, sigma = s, stop = stop, result = 'LAST_STEP', include_self = True, max_steps = max_steps, bound_cond = bound_cond)

        # check the order parameter in the last step
        o_p.append(calc_order_par(x, r, n, bound_cond))

    # append an array of clusters/steps for a specific n
    order_p.append(o_p)

order_p = np.array(order_p)

#----------------------------------------------
# SAVE

# save results to a CSV file
with open("sde analysis/HK 2 results.csv","w") as f:
    wr = csv.writer(f, lineterminator = '\n')
    wr.writerows(order_p)

#----------------------------------------------
# READ

# read the file
with open("sde analysis/HK 2 results.csv", "r") as f:
    reader = csv.reader(f, delimiter=",", quotechar='"')
    order_p = [row for row in reader]

# convert string lists to lists
for i in range(len(order_p)):
    for j in range(len(order_p[0])):
        order_p[i][j] = ast.literal_eval(order_p[i][j])

order_p = np.array(order_p)

#----------------------------------------------
# PLOT

nrows = len(sigma)
ncols = len(R)

# prepare data
data1 = np.ma.array(order_p.reshape((nrows, ncols)), mask=order_p==0)

fig, ax1 = plt.subplots(1, 1, figsize = (10, 8))
im1 = ax1.imshow(data1, cmap = "Oranges", origin = "lower", vmin = 0)

# prepare the corresponding ticks for the axis
ytick_list = [None]
for i in range(len(sigma)):
    if i%5==0:
        ytick_list.append(round(sigma[i], 3))
        ytick_list.append(None)

xtick_list = [None]
for i in range(len(R)):
    if i%5==0:
        xtick_list.append(round(R[i], 3))
        xtick_list.append(None)

# workaround for the warning
warnings.filterwarnings("ignore")

for ax in [ax1]:

    ax.set_yticks(np.arange(nrows+1)-0.5, minor=True)
    ax.set_yticklabels(ytick_list)

    ax.set_xticks(np.arange(ncols+1)-0.499, minor=True)
    ax.set_xticklabels(xtick_list)

    # ax.grid(which="minor")
    ax.tick_params(which="minor", size=0)

    ax.set_xlabel('R', fontsize=18)
    h = ax.set_ylabel(r'$\sigma$', fontsize=18)
    h.set_rotation(0)

ax1.set_title('Order Parameter for Varying R and ' + r'$\sigma$ Values', fontsize = 20)

# colorbar 1
divider = make_axes_locatable(ax1)
cax = divider.append_axes('right', size='5%', pad=0.2)
fig.colorbar(im1, cax=cax, orientation='vertical')

fig.suptitle('Order Parameter for Varying R and ' + r'$\sigma$ Values', fontsize = 25)

# set the warnings back on
warnings.filterwarnings("default")

plt.show()
