"""
This script simulates the 2D opinion dynamics generated by using a discrete HK model.
A function HK_discrete_2d is called after defining the required parameters.
The results are plotted on a 'Opinions x vs Opinions y' figure with a few pathes illustrated.
"""

import numpy as np
import matplotlib.pyplot as plt
from matplotlib.pyplot import figure
from analysis_2D.functions.HK_discrete_2d import HK_discrete_2d
from analysis_2D.functions.calc_order_par import calc_order_par
from analysis_2D.functions.calc_clusters import calc_clusters

# PARAMETERS
#----------------------------------------

# the number of agents
n = 20

# the bound
R = 0.25

# the stopping criterion
stop = 10**(-5)

# the distance norm for checking neighbours
dist_norm = 2
#----------------------------------------


# INITIAL CONDITIONS
#----------------------------------------
# OPTION 1 - SQUARE: sample the initial opinions from a uniform distribution
# x0 = np.random.uniform(0, 1, n)
# y0 = np.random.uniform(0, 1, n)
#
# x = [[x0[i], y0[i]] for i in range(n)]


#----------------------------------------
# OPTION 2 - CIRCLE: sample the initial opinions from a uniform distribution
length = 0.5 * np.sqrt(np.random.uniform(0, 1, n))
angle = 2 * np.pi * np.random.uniform(0, 1, n)

x = []

x0 = 0.5 + length * np.cos(angle)
y0 = 0.5 + length * np.sin(angle)

x = [[x0[i], y0[i]] for i in range(n)]
#----------------------------------------

# SIMULATION
#----------------------------------------
res = HK_discrete_2d (R, n, x, stop, result = 'FULL', max_steps = 50, dist_norm = dist_norm)

# calculate the no of steps taken
steps = len(res)

# the number of clusters
cl = calc_clusters(res[-1], R, n, dist_norm = dist_norm)
#----------------------------------------

# PLOT THE PATHS
#----------------------------------------
figure(figsize=(8, 8), dpi=80)

# define the colour map
colors = plt.cm.gist_rainbow(np.linspace(0, 1, n))
step_for_arrow = int(steps/2)

# plot each agent separately
for i in range(n):

    # add paths
    plt.plot(res[:,i,0], res[:,i,1], color = colors[i])

    # add last state
    plt.plot(res[steps-1,i,0], res[steps-1,i,1], linestyle = "", marker = "o", markersize = 7, color = 'black')

plt.xlabel("x1")
plt.ylabel("x2")
plt.xlim(0, 1)
plt.ylim(0, 1)
plt.title("Discrete-Time Opinion Dynamics in 2D: Clusters = {}.".format(cl))
plt.grid()
plt.show()
