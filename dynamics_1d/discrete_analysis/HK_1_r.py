"""
This script simulates the opinion dynamics generated by using a discrete HK model when radicals are included.
A function HK_discrete_r is called after defining the required parameters.
The results are plotted on a 'Timesteps vs Opinions' figure.
"""

import numpy as np
import matplotlib.pyplot as plt
from matplotlib.pyplot import figure


# PARAMETERS
#----------------------------------------
# the number of agents
n = 23

# the bound
R = 0.25

# the stopping criterion
stop = 10**(-5)


# RADICALS
#----------------------------------------
# the number of radicals
n_rad = 5

# distribution of radicals
x0_rad = np.array([0.8] * n_rad)


# INITIAL CONDITIONS
#----------------------------------------
# OPTION 1: simulate the initial opinions
# x0 = np.random.uniform(0, 1, n)
# x0.sort()

# OPTION 2: use expected value distribution
x0 = [i/(n+1) for i in range(1, n+1)]
#----------------------------------------


# SIMULATION
#----------------------------------------
res = HK_discrete_r (R, n, x0, n_rad, x0_rad, stop, include_self = False)

# calculate the no of steps taken
steps = len(res)
#----------------------------------------

calc_clusters(res[-1], R, n + n_rad)

# PLOT THE RESULTS
#----------------------------------------
figure(figsize = (10, 8), dpi = 80)

# define the colour map
colors = plt.cm.gist_rainbow(np.linspace(0, 1, n + n_rad))

# plot each agent separately
for i in range(n + n_rad):
    plt.plot(range(steps), res[:,i], color = colors[i])

plt.ylim(0, 1.01)
plt.xlabel("Timesteps")
plt.ylabel("Opinions")
plt.title("Discrete-Time Opinion Dynamics with Radicals")
plt.grid()
plt.show()
