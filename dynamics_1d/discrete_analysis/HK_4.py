"""
Analysis of a number of clusters for varying parameter R when n is fixed.
This script simulates the opinion dynamics generated by using a discrete HK model.
The simulation is performed for two cases: self-opinion included and excluded.
The parameter R vs the number of clusters is given by a plot.
"""

import numpy as np
import matplotlib.pyplot as plt
from matplotlib.pyplot import figure
from matplotlib import colors
from functions.HK_discrete import HK_discrete
from functions.calc_clusters import calc_clusters

#----------------------------------------------
# PARAMETERS

# fix the number of agents
n = 50

# the bound
R = np.linspace(0.05, 0.3, 150)
# R = R[1:]

# the array of end clusters
clusters_1 = []
clusters_2 = []

# the stopping criterion
stop = 10**(-5)

# INITIAL CONDITIONS: use expected value distribution
x0 = [i/(n+1) for i in range(1, n+1)]
x0 = [i/(n+1) for i in range(1, n+1)]

#----------------------------------------------
# SIMULATION

for r in R:

    # SIMULATION
    x_1 = HK_discrete(r, n, x0, stop, 'LAST_STEP', include_self = False)
    x_2 = HK_discrete(r, n, x0, stop, 'LAST_STEP', include_self = True)

    # check the number of clusters in the last step
    clusters_1.append(calc_clusters(x_1, r, n))
    clusters_2.append(calc_clusters(x_2, r, n))

clusters_1 = np.array(clusters_1)
clusters_2 = np.array(clusters_2)

#----------------------------------------------
# PLOT
fig = plt.figure(figsize = (10, 8))

plt.plot(R, clusters_1, c = 'darkgrey', alpha = 1, ls = '--', lw = 2, label = 'Self-opinion excluded')
plt.plot(R, clusters_2, c = 'orange', alpha = 1,  lw = 2, label = 'Self-opinion included')
plt.xlabel('R', fontsize = 15)
plt.ylabel('Number of clusters', fontsize = 15)
# plt.title('Number of Clusters for Varying R Values (N = {})'.format(n), fontsize = 20)
plt.legend()
plt.grid()

plt.savefig('discrete_analysis/HK 4 results.png')
plt.show()
